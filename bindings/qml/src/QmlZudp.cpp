/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/

#include "QmlZudp.h"


///
//  Send zframe to UDP socket to given address and port,
//  return -1 if sending failed (i.e. due to interface having
//  disappeared (happens easily with WiFi))
int QmlZudp::sendto (QmlZframe *frame, const QString &address, int port) {
    return zudp_sendto (self, frame->self, address.toUtf8().data(), port);
};

///
//  Receive zframe from UDP socket, and set address of peer that sent it
//  The peername must be a char [INET_ADDRSTRLEN] array if IPv6 is disabled or
//  NI_MAXHOST if it's enabled. Returns NULL when failing to get peer address.
QmlZframe *QmlZudp::recv (const QString &peername, int peerlen) {
    QmlZframe *retQ_ = new QmlZframe ();
    retQ_->self = zudp_recv (self, peername.toUtf8().data(), peerlen);
    return retQ_;
};

///
//  Bind a socket to a and address and port number.
//  On failure, returns -1.
int QmlZudp::bind (const QString &address, int port) {
    return zudp_bind (self, address.toUtf8().data(), port);
};

///
//  Return the socket's filedescriptor
int QmlZudp::fd () {
    return zudp_fd (self);
};


QObject* QmlZudp::qmlAttachedProperties(QObject* object) {
    return new QmlZudpAttached(object);
}


///
//  Handle an I/O error on some socket operation; will report and die on
//  fatal errors, and continue silently on "try again" errors.
void QmlZudpAttached::error (const QString &reason) {
    zudp_error (reason.toUtf8().data());
};

///
//  Self test of this class.
void QmlZudpAttached::test (bool verbose) {
    zudp_test (verbose);
};

///
//  Create UDP socket of the given type. Set the reuse option if
//  you need to reuse the socket's address.
QmlZudp *QmlZudpAttached::construct (int type, bool reuse) {
    QmlZudp *qmlSelf = new QmlZudp ();
    qmlSelf->self = zudp_new (type, reuse);
    return qmlSelf;
};

///
//  Close a UDP socket
void QmlZudpAttached::destruct (QmlZudp *qmlSelf) {
    zudp_destroy (&qmlSelf->self);
};

/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
