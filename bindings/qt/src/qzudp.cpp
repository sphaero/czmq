/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/

#include "qczmq.h"

///
//  Copy-construct to return the proper wrapped c types
QZudp::QZudp (zudp_t *self, QObject *qObjParent) : QObject (qObjParent)
{
    this->self = self;
}


///
//  Create UDP socket of the given type. Set the reuse option if
//  you need to reuse the socket's address.
QZudp::QZudp (int type, bool reuse, QObject *qObjParent) : QObject (qObjParent)
{
    this->self = zudp_new (type, reuse);
}

///
//  Close a UDP socket
QZudp::~QZudp ()
{
    zudp_destroy (&self);
}

///
//  Send zframe to UDP socket to given address and port,
//  return -1 if sending failed (i.e. due to interface having
//  disappeared (happens easily with WiFi))
int QZudp::sendto (QZframe *frame, const QString &address, int port)
{
    int rv = zudp_sendto (self, frame->self, address.toUtf8().data(), port);
    return rv;
}

///
//  Receive zframe from UDP socket, and set address of peer that sent it
//  The peername must be a char [INET_ADDRSTRLEN] array if IPv6 is disabled or
//  NI_MAXHOST if it's enabled. Returns NULL when failing to get peer address.
QZframe * QZudp::recv (const QString &peername, int peerlen)
{
    QZframe *rv = new QZframe (zudp_recv (self, peername.toUtf8().data(), peerlen));
    return rv;
}

///
//  Bind a socket to a and address and port number.
//  On failure, returns -1.
int QZudp::bind (const QString &address, int port)
{
    int rv = zudp_bind (self, address.toUtf8().data(), port);
    return rv;
}

///
//  Return the socket's filedescriptor
int QZudp::fd ()
{
    int rv = zudp_fd (self);
    return rv;
}

///
//  Handle an I/O error on some socket operation; will report and die on
//  fatal errors, and continue silently on "try again" errors.
void QZudp::error (const QString &reason)
{
    zudp_error (reason.toUtf8().data());

}

///
//  Self test of this class.
void QZudp::test (bool verbose)
{
    zudp_test (verbose);

}
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
