/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
#ifndef Q_ZUDP_H
#define Q_ZUDP_H

#include "qczmq.h"

class QT_CZMQ_EXPORT QZudp : public QObject
{
    Q_OBJECT
public:

    //  Copy-construct to return the proper wrapped c types
    QZudp (zudp_t *self, QObject *qObjParent = 0);

    //  Create UDP socket of the given type. Set the reuse option if
    //  you need to reuse the socket's address.
    explicit QZudp (int type, bool reuse, QObject *qObjParent = 0);

    //  Close a UDP socket
    ~QZudp ();

    //  Send zframe to UDP socket to given address and port,
    //  return -1 if sending failed (i.e. due to interface having
    //  disappeared (happens easily with WiFi))
    int sendto (QZframe *frame, const QString &address, int port);

    //  Receive zframe from UDP socket, and set address of peer that sent it
    //  The peername must be a char [INET_ADDRSTRLEN] array if IPv6 is disabled or
    //  NI_MAXHOST if it's enabled. Returns NULL when failing to get peer address.
    QZframe * recv (const QString &peername, int peerlen);

    //  Bind a socket to a and address and port number.
    //  On failure, returns -1.
    int bind (const QString &address, int port);

    //  Return the socket's filedescriptor
    int fd ();

    //  Handle an I/O error on some socket operation; will report and die on
    //  fatal errors, and continue silently on "try again" errors.
    static void error (const QString &reason);

    //  Self test of this class.
    static void test (bool verbose);

    zudp_t *self;
};
#endif //  Q_ZUDP_H
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/
