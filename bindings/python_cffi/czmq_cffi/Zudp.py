################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
from . import utils
from . import destructors
libczmq_destructors = destructors.lib

class Zudp(object):
    """

    """

    def __init__(self, type, reuse):
        """
        Create UDP socket of the given type. Set the reuse option if
        you need to reuse the socket's address.
        """
        p = utils.lib.zudp_new(type, reuse)
        if p == utils.ffi.NULL:
            raise MemoryError("Could not allocate person")

        # ffi.gc returns a copy of the cdata object which will have the
        # destructor called when the Python object is GC'd:
        # https://cffi.readthedocs.org/en/latest/using.html#ffi-interface
        self._p = utils.ffi.gc(p, libczmq_destructors.zudp_destroy_py)

    def sendto(self, frame, address, port):
        """
        Send zframe to UDP socket to given address and port,
        return -1 if sending failed (i.e. due to interface having
        disappeared (happens easily with WiFi))
        """
        return utils.lib.zudp_sendto(self._p, frame._p, utils.to_bytes(address), port)

    def recv(self, peername, peerlen):
        """
        Receive zframe from UDP socket, and set address of peer that sent it
        The peername must be a char [INET_ADDRSTRLEN] array if IPv6 is disabled or
        NI_MAXHOST if it's enabled. Returns NULL when failing to get peer address.
        """
        return utils.lib.zudp_recv(self._p, utils.to_bytes(peername), peerlen)

    def bind(self, address, port):
        """
        Bind a socket to a and address and port number.
        On failure, returns -1.
        """
        return utils.lib.zudp_bind(self._p, utils.to_bytes(address), port)

    def fd(self):
        """
        Return the socket's filedescriptor
        """
        return utils.lib.zudp_fd(self._p)

    @staticmethod
    def error(reason):
        """
        Handle an I/O error on some socket operation; will report and die on
        fatal errors, and continue silently on "try again" errors.
        """
        utils.lib.zudp_error(utils.to_bytes(reason))

    @staticmethod
    def test(verbose):
        """
        Self test of this class.
        """
        utils.lib.zudp_test(verbose)

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
